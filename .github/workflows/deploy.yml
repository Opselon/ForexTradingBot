# ====================================================================================
# THE DEFINITIVE WORKFLOW (v.2024-FinalBoss-Corrected)
# This workflow uses a bootstrapper to run the main deployment script from a
# temporary location, which then handles the final, clean deployment and reporting.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  # This path MUST match the location of your script in the repository
  SCRIPT_PATH_IN_REPO: 'deployment/Deploy-And-Verify.ps1'
  SCRIPT_FILE_NAME: 'Deploy-And-Verify.ps1'

jobs:
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish App'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: '‚ûï Include Deploy Script in Publish Folder'
        run: cp ${{ env.SCRIPT_PATH_IN_REPO }} ./publish
      - name: 'üóúÔ∏è Create Unified ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Unified Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: release.zip
          retention-days: 1

  deploy:
    name: 'üö¢ 2. Deploy & Verify'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: 'üì§ Upload Unified ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Bootstrapper'
        id: deploy_step
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          # This bootstrapper is simple, clean, and robust.
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
                $TempPath = '${{ env.REMOTE_TEMP_PATH }}'
                $ZipFile = Join-Path $TempPath 'release.zip'
                $UnpackPath = Join-Path $TempPath 'unpack'
                $ScriptFile = Join-Path $UnpackPath '${{ env.SCRIPT_FILE_NAME }}'

                if (Test-Path $UnpackPath) { Remove-Item -Path $UnpackPath -Recurse -Force }
                Expand-Archive -Path `$ZipFile -DestinationPath `$UnpackPath -Force

                & `$ScriptFile -ConnectionString '${{ secrets.PROD_CONNECTION_STRING }}' -TelegramBotToken '${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}' -TelegramApiId '${{ secrets.TELEGRAM_API_ID }}' -TelegramApiHash '${{ secrets.TELEGRAM_API_HASH }}' -TelegramPhoneNumber '${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}' -CryptoPayApiToken '${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}'
                
                Remove-Item -Path `$ZipFile -Force
            "
      
      - name: 'üîç Final Health Check & Report'
        if: always()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
                $DeployPath = 'C:\Apps\ForexTradingBot'
                $TempPath = '${{ env.REMOTE_TEMP_PATH }}'
                $CrashLogPath = Join-Path $TempPath 'App-Crash-Log.txt'
                
                Write-Host '========================================================'
                Write-Host '          FINAL DEPLOYMENT HEALTH CHECK REPORT'
                Write-Host '========================================================'
                $process = Get-Process -Name 'WebAPI' -ErrorAction SilentlyContinue
                if ($process) {
                    Write-Host '‚úÖ‚úÖ‚úÖ SUCCESS: WebAPI process is RUNNING!' -ForegroundColor Green
                } else {
                    Write-Host '‚ùå‚ùå‚ùå FAILURE: WebAPI process is NOT RUNNING.' -ForegroundColor Red
                    Write-Host '--- Checking for Crash Log ---'
                    if (Test-Path $CrashLogPath) {
                        $crashContent = Get-Content $CrashLogPath
                        if ($crashContent) {
                            Write-Host 'üî¥ Found Crash Log with content:'
                            Write-Host '------------------ CRASH LOG START ------------------'
                            $crashContent
                            Write-Host '------------------- CRASH LOG END -------------------'
                        } else { Write-Host 'üü° Crash log exists but is empty.' }
                    } else { Write-Host 'üü° No crash log file found.' }
                }
                
                Write-Host '--- Displaying Latest Deployment Log ---'
                $DeployLog = Get-ChildItem -Path $TempPath -Filter 'Deployment-Log-*.txt' | Sort-Object CreationTime -Descending | Select-Object -First 1
                if ($DeployLog) {
                    Write-Host ('Log File: ' + $DeployLog.Name)
                    Write-Host '------------------ DEPLOY LOG START ------------------'
                    Get-Content -Path $DeployLog.FullName
                    Write-Host '------------------- DEPLOY LOG END -------------------'
                } else { Write-Host '‚ùå No deployment script log found.' -ForegroundColor Red }
                Write-Host '========================================================'
            "