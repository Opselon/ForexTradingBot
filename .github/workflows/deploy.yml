# ====================================================================================
# THE FINAL DIAGNOSTIC WORKFLOW
# This workflow's sole purpose is to run a powerful, self-logging script
# on the server and report back the findings by printing the log files.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  SCRIPT_PATH_IN_REPO: 'deployment/Deploy-And-Capture.ps1'
  SCRIPT_FILE_NAME: 'Deploy-And-Capture.ps1'

jobs:
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish App'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: '‚ûï Include Deploy Script in Publish Folder'
        run: cp ${{ env.SCRIPT_PATH_IN_REPO }} ./publish
      - name: 'üóúÔ∏è Create Unified ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Unified Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: release.zip
          retention-days: 1

  deploy:
    name: 'üö¢ 2. Deploy & Diagnose'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: 'üì§ Upload Unified ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment & Diagnostics'
        id: deploy_step
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            # This script is now just a simple bootstrapper. All logic is in the .ps1 file.
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
                $TempPath = '${{ env.REMOTE_TEMP_PATH }}'
                $ZipFile = Join-Path $TempPath 'release.zip'
                $UnpackPath = 'C:\Apps\Temp\unpack' # A dedicated temporary unpack location
                $ScriptFile = Join-Path $UnpackPath '${{ env.SCRIPT_FILE_NAME }}'

                if (Test-Path $UnpackPath) { Remove-Item -Path $UnpackPath -Recurse -Force }
                Expand-Archive -Path `$ZipFile -DestinationPath `$UnpackPath -Force

                & `$ScriptFile -ConnectionString '${{ secrets.PROD_CONNECTION_STRING }}' -TelegramBotToken '${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}' -TelegramApiId '${{ secrets.TELEGRAM_API_ID }}' -TelegramApiHash '${{ secrets.TELEGRAM_API_HASH }}' -TelegramPhoneNumber '${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}' -CryptoPayApiToken '${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}'
            "
      
      # ‚úÖ‚úÖ‚úÖ THE MOST IMPORTANT STEP: REPORTING THE FINDINGS ‚úÖ‚úÖ‚úÖ
      - name: 'üîç Retrieve and Display Logs from Server'
        if: always() # This step runs even if the previous one fails
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            echo "========================================================"
            echo "          APPLICATION CRASH LOG (`App-Crash-Log.txt`)"
            echo "========================================================"
            powershell -Command "Get-Content -Path '${{ env.REMOTE_TEMP_PATH }}\App-Crash-Log.txt' -ErrorAction SilentlyContinue"
            
            echo "========================================================"
            echo "          DEPLOYMENT SCRIPT LOG (`Deployment-Log-*.txt`)"
            echo "========================================================"
            powershell -Command "Get-ChildItem -Path '${{ env.REMOTE_TEMP_PATH }}' -Filter 'Deployment-Log-*.txt' | ForEach-Object { Get-Content -Path $_.FullName }"
            