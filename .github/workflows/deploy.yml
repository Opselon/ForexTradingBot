# ====================================================================================
# THE ABSOLUTELY FINAL, BULLETPROOF WORKFLOW: Script-in-the-Zip Method
# This is the industry-standard, most reliable method.
# 1. The deployment script is PACKAGED INSIDE the release.zip.
# 2. Only ONE file is uploaded, eliminating all previous points of failure.
# 3. The remote commands are simple and directly use the unpacked script.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  # IMPORTANT: Make sure this path matches the location of your script in the repository
  SCRIPT_PATH_IN_REPO: 'deployment/Deploy-Production.ps1'
  SCRIPT_FILE_NAME: 'Deploy-Production.ps1' # Just the filename

jobs:
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository (including deployment script)'
        uses: actions/checkout@v4

      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 'üì¶ Publish Self-Contained App for Windows'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true

      # ‚úÖ‚úÖ‚úÖ THE CRITICAL CHANGE IS HERE ‚úÖ‚úÖ‚úÖ
      - name: '‚ûï Include Deployment Script in Publish Folder'
        run: cp ${{ env.SCRIPT_PATH_IN_REPO }} ./publish

      - name: 'üóúÔ∏è Create ZIP Archive (with script inside)'
        run: cd ./publish && zip -r ../release.zip .
      
      - name: 'üîç Verify ZIP Contents (Optional but good practice)'
        run: unzip -l release.zip

      - name: 'üì§ Upload Single Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: release.zip
          retention-days: 1

  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Single Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: 'üì§ Upload SINGLE Release ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip" # Only one file to upload
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          # The script is now very simple: Unpack, then execute the script from INSIDE the app folder.
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
            try {
                $ErrorActionPreference = 'Stop'
                $DeployPath = '${{ env.REMOTE_DEPLOY_PATH }}'
                $TempPath = '${{ env.REMOTE_TEMP_PATH }}'
                $ZipFile = Join-Path $TempPath 'release.zip'
                
                # Unpack the entire archive (app files + deployment script)
                Write-Host 'Unpacking archive to $DeployPath...'
                Expand-Archive -Path `$ZipFile -DestinationPath `$DeployPath -Force
                
                # Define the path to the script *inside* the deployment folder
                $ScriptToRun = Join-Path $DeployPath '${{ env.SCRIPT_FILE_NAME }}'
                
                # Execute the script
                Write-Host 'Executing deployment script...'
                & `$ScriptToRun -ConnectionString '${{ secrets.PROD_CONNECTION_STRING }}' -TelegramBotToken '${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}' -TelegramApiId '${{ secrets.TELEGRAM_API_ID }}' -TelegramApiHash '${{ secrets.TELEGRAM_API_HASH }}' -TelegramPhoneNumber '${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}' -CryptoPayApiToken '${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}'
                
                Write-Host 'Deployment script finished successfully.'

            } catch {
                Write-Host 'A fatal error occurred during the initial unpack/execute phase.' -ForegroundColor Red
                Write-Host `"$($_.Exception.ToString())`" -ForegroundColor Red
                exit 1
            }"