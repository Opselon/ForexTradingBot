# ====================================================================================
# THE DEFINITIVE WORKFLOW (v.2024-Final-Boss)
# This workflow uses a "One Task, One Step" philosophy for maximum reliability.
# Each remote command is simple, explicit, and its output is logged.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  # This path MUST match the location of your script in the repository
  SCRIPT_PATH_IN_REPO: 'deployment/Deploy-And-Diagnose.ps1'
  SCRIPT_FILE_NAME: 'Deploy-And-Diagnose.ps1'

jobs:
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish App'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: '‚ûï Include Deploy Script in Publish Folder'
        run: cp ${{ env.SCRIPT_PATH_IN_REPO }} ./publish
      - name: 'üóúÔ∏è Create Unified ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Unified Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: release.zip
          retention-days: 1

  deploy:
    name: 'üö¢ 2. Deploy & Verify'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: 'üì§ [STEP 1/6] Upload Unified ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"

      - name: 'üõë [STEP 2/6] Stop Running Application'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            taskkill /IM WebAPI.exe /F 2>nul || echo "WebAPI process not found, which is normal."
      
      - name: 'üóëÔ∏è [STEP 3/6] Clean Deployment Directory'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell -Command "if (Test-Path '${{ env.REMOTE_DEPLOY_PATH }}') { Get-ChildItem -Path '${{ env.REMOTE_DEPLOY_PATH }}' -Exclude 'Session' | Remove-Item -Recurse -Force -Verbose }"
            
      - name: 'ü§ê [STEP 4/6] Unpack New Version'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell -Command "Expand-Archive -Path '${{ env.REMOTE_TEMP_PATH }}\release.zip' -DestinationPath '${{ env.REMOTE_DEPLOY_PATH }}' -Force -Verbose"
            
      - name: '‚ñ∂Ô∏è [STEP 5/6] Execute Deployment Script'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${{ env.REMOTE_DEPLOY_PATH }}\${{ env.SCRIPT_FILE_NAME }}" -ConnectionString "${{ secrets.PROD_CONNECTION_STRING }}" -TelegramBotToken "${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" -TelegramApiId "${{ secrets.TELEGRAM_API_ID }}" -TelegramApiHash "${{ secrets.TELEGRAM_API_HASH }}" -TelegramPhoneNumber "${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}" -CryptoPayApiToken "${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}"
      
      - name: 'üîç [STEP 6/6] Final Health Check & Report'
        if: always() # This step runs NO MATTER WHAT.
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
                $DeployPath = '${{ env.REMOTE_DEPLOY_PATH }}'
                $TempPath = '${{ env.REMOTE_TEMP_PATH }}'
                $CrashLogPath = Join-Path $TempPath 'App-Crash-Log.txt'
                
                Write-Host '========================================================'
                Write-Host '          FINAL DEPLOYMENT HEALTH CHECK REPORT'
                Write-Host '========================================================'

                # Verification 1: Application Status
                Write-Host '--- Verifying Application Status ---'
                $process = Get-Process -Name 'WebAPI' -ErrorAction SilentlyContinue
                if ($process) {
                    Write-Host '‚úÖ‚úÖ‚úÖ SUCCESS: WebAPI process is RUNNING!' -ForegroundColor Green
                } else {
                    Write-Host '‚ùå‚ùå‚ùå FAILURE: WebAPI process is NOT RUNNING.' -ForegroundColor Red
                    Write-Host '--- Checking for Crash Log ---'
                    if (Test-Path $CrashLogPath) {
                        $crashContent = Get-Content $CrashLogPath
                        if ($crashContent) {
                            Write-Host 'üî¥ Found Crash Log with content:'
                            Write-Host '------------------ CRASH LOG START ------------------'
                            $crashContent
                            Write-Host '------------------- CRASH LOG END -------------------'
                        } else { Write-Host 'üü° Crash log exists but is empty.' }
                    } else { Write-Host 'üü° No crash log file found.' }
                }
                
                # Final cleanup of temporary files
                Write-Host '--- Cleaning up temporary files ---'
                if (Test-Path (Join-Path $TempPath 'release.zip')) { Remove-Item (Join-Path $TempPath 'release.zip') -Force }
                if (Test-Path $CrashLogPath) { Remove-Item $CrashLogPath -Force }
                Write-Host '========================================================'
            "