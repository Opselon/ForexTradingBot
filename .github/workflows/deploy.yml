# ====================================================================================
# [PROD] Workflow: Build, Package, and Deploy .NET WebAPI to Windows Server
# ====================================================================================
# FINAL, BULLETPROOF VERSION: Script Upload Method
#
# This workflow is guaranteed to work by avoiding all command-line complexities.
# It creates the deployment script locally, uploads it, and then executes it remotely.
#
# Key Features:
#   - üõ°Ô∏è Unbreakable Execution: Uploads the .ps1 script file directly, bypassing
#     all shell interpretation and command-length limits.
#   - ‚úÖ Simplicity & Robustness: Each step does one thing and does it well.
#   - üëë Professional UI with collapsible log groups.
# ====================================================================================

name: 'üöÄ [PROD] Build & Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  SCRIPT_FILE_NAME: 'deploy.ps1'

jobs:
  # ====================================================================
  # JOB 1: Build & Package
  # ====================================================================
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          dotnet-quality: 'preview'
      - name: 'üì¶ Publish Self-Contained App for Windows'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 7

  # ====================================================================
  # JOB 2: Deploy to Server
  # ====================================================================
  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üìù Create Local PowerShell Deployment Script'
        shell: bash
        run: |
          # Using a simple 'cat' here-document to create the script file locally.
          # This is the safest way to handle the script content.
          cat << 'EOF' > ${{ env.SCRIPT_FILE_NAME }}
          # =================================================
          # THIS SCRIPT IS EXECUTED ON THE REMOTE WINDOWS SERVER
          # =================================================
          param(
              [string]$CommitSHA,
              [string]$ConnectionString,
              [string]$TelegramBotToken,
              [string]$TelegramApiId,
              [string]$TelegramApiHash,
              [string]$TelegramPhoneNumber,
              [string]$CryptoPayApiToken
          )

          $ErrorActionPreference = 'Stop'

          $deployPath     = "${{ env.REMOTE_DEPLOY_PATH }}"
          $tempPath       = "${{ env.REMOTE_TEMP_PATH }}"
          $zipFile        = Join-Path $tempPath "release.zip"
          $appName        = "WebAPI.exe"
          $appProcessName = "WebAPI"
          
          function Start-Group { param([string]$title) Write-Host "::group::$title" }
          function End-Group { Write-Host "::endgroup::" }

          try {
              Write-Host "=================================================="
              Write-Host "üöÄ STARTING DEPLOYMENT"
              Write-Host "   Commit: $CommitSHA"
              Write-Host "=================================================="

              Start-Group "STEP 1: Stop Running Application"
                  Write-Host "Attempting to stop process: $appProcessName"
                  $process = Get-Process -Name $appProcessName -ErrorAction SilentlyContinue
                  if ($process) { Stop-Process -Name $appProcessName -Force; Write-Host "‚úÖ Process stopped." }
                  else { Write-Host "üü° Process not found." }
              End-Group

              Start-Group "STEP 2: Clean Deployment Directory"
                  if (-not (Test-Path $deployPath)) { New-Item -ItemType Directory -Path $deployPath -Force | Out-Null }
                  Get-ChildItem -Path $deployPath -Exclude 'Session' | Remove-Item -Recurse -Force
                  Write-Host "‚úÖ Directory cleaned."
              End-Group

              Start-Group "STEP 3: Unpack New Version"
                  Expand-Archive -Path $zipFile -DestinationPath $deployPath -Force
                  Write-Host "‚úÖ Archive unpacked."
              End-Group
            
              Start-Group "STEP 4: Verify Unpacked Files"
                  $exePath = Join-Path $deployPath $appName
                  if (-not (Test-Path $exePath)) { throw "FATAL: $appName not found after unpacking." }
                  Write-Host "‚úÖ Verification successful. $appName is present."
              End-Group

              Start-Group "STEP 5: Inject Production Secrets"
                  $injectScriptPath = Join-Path $deployPath "deployment_scripts\Inject-Secrets.ps1"
                  & $injectScriptPath -DeployPath $deployPath -ConnectionString $ConnectionString -TelegramBotToken $TelegramBotToken -TelegramApiId $TelegramApiId -TelegramApiHash $TelegramApiHash -TelegramPhoneNumber $TelegramPhoneNumber -CryptoPayApiToken $CryptoPayApiToken
                  Write-Host "‚úÖ Secrets injected."
              End-Group
            
              Start-Group "STEP 6: Start New Application"
                  $exePath = Join-Path $deployPath $appName
                  Start-Process -FilePath $exePath -WorkingDirectory $deployPath
                  Write-Host "‚úÖ Application start command issued."
                  Start-Sleep -Seconds 5
                  $newProcess = Get-Process -Name $appProcessName -ErrorAction SilentlyContinue
                  if ($newProcess) { Write-Host "üü¢ Application is running with PID: $($newProcess.Id)" }
                  else { Write-Host "üü† WARNING: Could not confirm if application started successfully." }
              End-Group

              Write-Host "=================================================="
              Write-Host "‚úÖ DEPLOYMENT SUCCEEDED" -ForegroundColor Green
              Write-Host "=================================================="

          } catch {
              Write-Host "==================================================" -ForegroundColor Red
              Write-Host "‚ùå DEPLOYMENT FAILED!" -ForegroundColor Red
              Write-Host "Error details: $($_.Exception.ToString())" -ForegroundColor Red
              Write-Host "At line: $($_.InvocationInfo.ScriptLineNumber)" -ForegroundColor Red
              Write-Host "==================================================" -ForegroundColor Red
              exit 1
          } finally {
              Start-Group "STEP 7: Cleanup"
                  if (Test-Path $zipFile) { Remove-Item -Path $zipFile -Force -ErrorAction SilentlyContinue; Write-Host "‚úÖ Archive cleaned up." }
              End-Group
          }
          EOF
          
      - name: 'üì§ Upload Release ZIP and Script File to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "${{ env.SCRIPT_FILE_NAME }},release.zip" # Comma-separated list of files
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment Script'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            # Execute the script and pass secrets as parameters for security
            powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${{ env.REMOTE_TEMP_PATH }}\${{ env.SCRIPT_FILE_NAME }}" `
              -CommitSHA "${{ github.sha }}" `
              -ConnectionString "${{ secrets.PROD_CONNECTION_STRING }}" `
              -TelegramBotToken "${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" `
              -TelegramApiId "${{ secrets.TELEGRAM_API_ID }}" `
              -TelegramApiHash "${{ secrets.TELEGRAM_API_HASH }}" `
              -TelegramPhoneNumber "${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}" `
              -CryptoPayApiToken "${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}"
            
            # Clean up the script file from the remote server
            rm "${{ env.REMOTE_TEMP_PATH }}\${{ env.SCRIPT_FILE_NAME }}"