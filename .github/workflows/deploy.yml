# ====================================================================================
# FINAL, SIMPLIFIED & BULLETPROOF VERSION: Script Upload Method
# This version hardcodes the non-sensitive paths directly into the script
# to avoid any parameter passing issues with the ssh-action.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  # We still define paths here for consistency, but they'll be hardcoded in the script.
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  SCRIPT_FILE_NAME: 'deploy.ps1'

jobs:
  # ... (Job 'build' remains exactly the same) ...
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish Self-Contained App for Windows'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 1

  # ====================================================================
  # JOB 2: Deploy to Server - Corrected Version
  # ====================================================================
  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üìù Create Local PowerShell Deployment Script'
        shell: bash
        run: |
          cat << 'EOF' > ${{ env.SCRIPT_FILE_NAME }}
          # This script will be uploaded to and executed on the remote Windows server.
          # SECRETS are passed as parameters. Paths are defined locally.
          param(
              [string]$ConnectionString,
              [string]$TelegramBotToken,
              [string]$TelegramApiId,
              [string]$TelegramApiHash,
              [string]$TelegramPhoneNumber,
              [string]$CryptoPayApiToken
          )

          # --- DEFINE PATHS LOCALLY ---
          $DeployPath     = "C:\Apps\ForexTradingBot"
          $TempPath       = "C:\Apps\Temp"
          # --- END OF PATHS ---

          $ErrorActionPreference = 'Stop'
          $appName = "WebAPI"
          $exeName = "WebAPI.exe"
          $zipFile = Join-Path $TempPath "release.zip"

          try {
              Write-Host "--- [1/7] Stopping Service ($appName) ---"
              $process = Get-Process -Name $appName -ErrorAction SilentlyContinue
              if ($process) { Stop-Process -Name $appName -Force; Write-Host '‚úÖ Service stopped.' } else { Write-Host 'üü° Service not running.' }

              Write-Host "--- [2/7] Cleaning Directory ($DeployPath) ---"
              if (-not (Test-Path $DeployPath)) { New-Item -ItemType Directory -Path $DeployPath -Force | Out-Null }
              Get-ChildItem -Path $DeployPath -Exclude 'Session' | Remove-Item -Recurse -Force
              Write-Host "‚úÖ Directory cleaned."

              Write-Host "--- [3/7] Unpacking Archive ($zipFile) ---"
              Expand-Archive -Path $zipFile -DestinationPath $DeployPath -Force
              Write-Host "‚úÖ Archive unpacked."

              Write-Host "--- [4/7] Verifying Files ---"
              if (-not (Test-Path (Join-Path $DeployPath $exeName))) { throw "FATAL: $exeName not found after unpack!" }
              Write-Host "‚úÖ $exeName found."

              Write-Host "--- [5/7] Injecting Secrets ---"
              $appSettingsPath = Join-Path $DeployPath "appsettings.Production.json"
              (Get-Content $appSettingsPath -Raw) -replace '#{ConnectionString}#', $ConnectionString `
                  -replace '#{TelegramBotToken}#', $TelegramBotToken `
                  -replace '#{TelegramApiId}#', $TelegramApiId `
                  -replace '#{TelegramApiHash}#', $TelegramApiHash `
                  -replace '#{TelegramPhoneNumber}#', $TelegramPhoneNumber `
                  -replace '#{CryptoPayApiToken}#', $CryptoPayApiToken | Set-Content -Path $appSettingsPath
              Write-Host "‚úÖ Secrets injected."
              
              Write-Host "--- [6/7] Starting Service with Production Environment ---"
              $env:ASPNETCORE_ENVIRONMENT = 'Production'
              Start-Process -FilePath (Join-Path $DeployPath $exeName) -WorkingDirectory $DeployPath
              Write-Host "‚úÖ Service start command issued."
              
              Write-Host "--- ‚úÖ DEPLOYMENT SUCCESSFUL ---" -ForegroundColor Green

          } catch {
              Write-Host "--- ‚ùå DEPLOYMENT FAILED! ---" -ForegroundColor Red
              Write-Host "Error: $($_.Exception.ToString())" -ForegroundColor Red
              exit 1
          } finally {
              Write-Host "--- [7/7] Final Cleanup ---"
              if (Test-Path $zipFile) { Remove-Item -Path $zipFile -Force -ErrorAction SilentlyContinue; Write-Host "‚úÖ Temp archive deleted." }
          }
          EOF
          
      - name: 'üì§ Upload Release ZIP and Script File'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "${{ env.SCRIPT_FILE_NAME }},release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment Script'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          # The script is now much shorter and more robust.
          # No backticks needed, which prevents interpretation errors.
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${{ env.REMOTE_TEMP_PATH }}\${{ env.SCRIPT_FILE_NAME }}" -ConnectionString "${{ secrets.PROD_CONNECTION_STRING }}" -TelegramBotToken "${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" -TelegramApiId "${{ secrets.TELEGRAM_API_ID }}" -TelegramApiHash "${{ secrets.TELEGRAM_API_HASH }}" -TelegramPhoneNumber "${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}" -CryptoPayApiToken "${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}"
            rm "${{ env.REMOTE_TEMP_PATH }}\${{ env.SCRIPT_FILE_NAME }}"