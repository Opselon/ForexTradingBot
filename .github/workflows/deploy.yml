# ====================================================================================
# THE DEFINITIVE, FLAWLESS, AND FULL-SCALE DEPLOYMENT WORKFLOW (v.Respect-The-Structure)
# This workflow uses your proven multi-job structure. The only change is
# consolidating the Deploy and Launch logic into a single, powerful, and
# unbreakable script to guarantee success.
# ====================================================================================

name: 'üöÄ [PROD] Full-Scale Deployment Operation'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  SESSION_FOLDER: 'Session'

jobs:
  # ====================== JOB 1: BUILD & PACKAGE (UNCHANGED) ======================
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.version.outputs.value }}
    steps:
      - name: 'Get Short Commit Hash for Versioning'
        id: version
        run: echo "value=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
      - name: 'üì• Checkout Repository & Scripts'
        uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish Application'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üúúÔ∏è Create Release ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Artifacts for Deployment Jobs'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts-${{ steps.version.outputs.value }}
          path: |
            release.zip
            deployment/
          retention-days: 1

  # ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ THIS JOB IS NOW THE ONLY DEPLOYMENT JOB AND IS UNBREAKABLE ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ
  # ====================== JOB 2: ATOMIC DEPLOYMENT ======================
  deploy:
    name: 'üö¢ 2. Execute Full Atomic Deployment Lifecycle'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'Download Artifacts from Build'
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifacts-${{ needs.build.outputs.release_version }}

      - name: 'Verify Downloaded Files on Runner'
        run: ls -R

      - name: 'Transfer All Files to Server Temp'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip,deployment"
          target: "${{ env.REMOTE_TEMP_PATH }}"

      - name: 'Execute Phase 1: Atomic Cleanup'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${{ env.REMOTE_TEMP_PATH }}\deployment\01-Prepare-And-Clean.ps1" -DeployPath "${{ env.REMOTE_DEPLOY_PATH }}" -TempPath "${{ env.REMOTE_TEMP_PATH }}" -SessionFolderName "${{ env.SESSION_FOLDER }}"

      - name: 'Execute Phase 2: Deploy, Inject & Launch'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${{ env.REMOTE_TEMP_PATH }}\deployment\02-Deploy-And-Configure.ps1" -DeployPath "${{ env.REMOTE_DEPLOY_PATH }}" -TempPath "${{ env.REMOTE_TEMP_PATH }}" -ConnectionString "${{ secrets.PROD_CONNECTION_STRING }}" -TelegramBotToken "${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" -TelegramApiId "${{ secrets.TELEGRAM_API_ID }}" -TelegramApiHash "${{ secrets.TELEGRAM_API_HASH }}" -TelegramPhoneNumber "${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}" -CryptoPayApiToken "${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}"
  
  # ====================== JOB 3: FINAL REPORTING (UNCHANGED) ======================
  report:
    name: 'üìä 3. Final Health Check, Report & Cleanup'
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 'üîç Retrieve and Display ALL Logs from Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
                $TempPath = '${{ env.REMOTE_TEMP_PATH }}';
                $DeployPath = '${{ env.REMOTE_DEPLOY_PATH }}';
                Write-Host '========================================================' -ForegroundColor White;
                Write-Host '          FULL DEPLOYMENT AND HEALTH REPORT';
                Write-Host '========================================================' -ForegroundColor White;
                
                $process = Get-Process -Name 'WebAPI' -ErrorAction SilentlyContinue;
                if ($process) { Write-Host '‚úÖ‚úÖ‚úÖ WebAPI process is RUNNING!' -ForegroundColor Green; } 
                else { Write-Host '‚ùå‚ùå‚ùå WebAPI process is NOT RUNNING.' -ForegroundColor Red; }
                
                Get-ChildItem -Path $TempPath -Filter '*-Log-*.txt' | Sort-Object Name | ForEach-Object {
                    Write-Host ('`n--- DEPLOYMENT TRANSCRIPT: ' + $_.Name + ' ---') -ForegroundColor Cyan;
                    Get-Content -Path $_.FullName -ErrorAction SilentlyContinue;
                    Write-Host ('--- END OF TRANSCRIPT: ' + $_.Name + ' ---');
                };
            "

      - name: 'üßπ Clean Up Remote Temp and Log Files'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -Command "
                Write-Host 'Cleaning up all log and script files from C:\Apps\Temp...';
                Remove-Item -Path '${{ env.REMOTE_TEMP_PATH }}\*' -Include '*.txt', '*.ps1', 'deployment' -Recurse -Force -ErrorAction SilentlyContinue;
                Write-Host 'Remote cleanup complete.';
            "