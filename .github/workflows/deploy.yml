# ====================================================================================
# [PROD] Workflow: Build, Package, and Deploy .NET WebAPI to Windows Server
# ====================================================================================
# This workflow represents a professional-grade CI/CD pipeline.
#
# Key Features:
#   - üëë Professional UI: Uses collapsible log groups for a clean and organized view.
#   - üõ°Ô∏è Robust & Safe Transfer: Encodes the PowerShell script to Base64 to prevent
#     any character interpretation errors during the SSH transfer.
#   - üí• Fail-Fast Logic: The remote script stops immediately on any error.
#   - ‚úÖ Comprehensive Verification: Checks for files at each critical stage.
#   - üîÑ Concurrency Control: Prevents multiple deployments from running simultaneously.
# ====================================================================================

name: 'üöÄ [PROD] Build & Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'

jobs:
  # ====================================================================
  # JOB 1: Build & Package
  # ====================================================================
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest

    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4

      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          dotnet-quality: 'preview'

      - name: 'üì¶ Publish Self-Contained App for Windows'
        run: >
          dotnet publish ${{ env.PROJECT_PATH }}
          --configuration Release
          --runtime win-x64
          --output ./publish
          --self-contained true
      
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: |
          cd ./publish
          zip -r ../release.zip .

      - name: 'üîç Verify ZIP Contents'
        run: |
          echo "Verifying contents of release.zip:"
          unzip -l release.zip

      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 7

  # ====================================================================
  # JOB 2: Deploy to Server
  # ====================================================================
  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    environment: Production

    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üì§ Upload Release ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: 'üõ°Ô∏è Encode PowerShell Script for Safe Transfer'
        id: ps_script
        uses: actions/github-script@v7
        with:
          script: |
            const script = `
              # This script runs on the remote Windows server.
              # It is Base64 encoded for safe transport.
              $ErrorActionPreference = 'Stop'

              $deployPath     = "${{ env.REMOTE_DEPLOY_PATH }}"
              $tempPath       = "${{ env.REMOTE_TEMP_PATH }}"
              $zipFile        = Join-Path $tempPath "release.zip"
              $appName        = "WebAPI.exe"
              $appProcessName = "WebAPI"
              
              # Function to create collapsible log groups
              function Start-Group { param($title) Write-Host "::group::$title" }
              function End-Group { Write-Host "::endgroup::" }

              try {
                Write-Host "=================================================="
                Write-Host "üöÄ STARTING DEPLOYMENT"
                Write-Host "   Server: ${{ secrets.PROD_SERVER_IP }}"
                Write-Host "   Commit: ${{ github.sha }}"
                Write-Host "=================================================="

                Start-Group "STEP 1: Stop Running Application"
                  Write-Host "Attempting to stop process: $appProcessName"
                  $process = Get-Process -Name $appProcessName -ErrorAction SilentlyContinue
                  if ($process) {
                    Stop-Process -Name $appProcessName -Force
                    Write-Host "‚úÖ Process stopped successfully."
                    Start-Sleep -Seconds 3
                  } else {
                    Write-Host "üü° Process not found. No action needed."
                  }
                End-Group

                Start-Group "STEP 2: Clean Deployment Directory"
                  if (Test-Path $deployPath) {
                    Write-Host "Cleaning directory: $deployPath (preserving 'Session' folder)..."
                    Get-ChildItem -Path $deployPath -Exclude 'Session' | Remove-Item -Recurse -Force
                    Write-Host "‚úÖ Directory cleaned."
                  } else {
                     Write-Host "üü° Deployment directory not found, creating it..."
                     New-Item -ItemType Directory -Path $deployPath -Force | Out-Null
                  }
                End-Group

                Start-Group "STEP 3: Unpack New Version"
                  Write-Host "Unpacking '$zipFile' to '$deployPath'..."
                  Expand-Archive -Path $zipFile -DestinationPath $deployPath -Force
                  Write-Host "‚úÖ Archive unpacked."
                End-Group
                
                Start-Group "STEP 4: Verify Unpacked Files"
                  $exePath = Join-Path $deployPath $appName
                  if (-not (Test-Path $exePath)) {
                      throw "FATAL: Verification failed! $appName not found after unpacking."
                  }
                  Write-Host "‚úÖ Verification successful. $appName is present."
                  Write-Host "Listing deployed files:"
                  Get-ChildItem -Path $deployPath | Select-Object Name
                End-Group

                Start-Group "STEP 5: Inject Production Secrets"
                  $scriptPath = Join-Path $deployPath "deployment_scripts\\Inject-Secrets.ps1"
                  & $scriptPath -DeployPath $deployPath -ConnectionString "${{ secrets.PROD_CONNECTION_STRING }}" -TelegramBotToken "${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" -TelegramApiId "${{ secrets.TELEGRAM_API_ID }}" -TelegramApiHash "${{ secrets.TELEGRAM_API_HASH }}" -TelegramPhoneNumber "${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}" -CryptoPayApiToken "${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}"
                  Write-Host "‚úÖ Secrets injected."
                End-Group
                
                Start-Group "STEP 6: Start New Application"
                  Write-Host "Starting '$appName' in the background..."
                  # This is a reliable way to start a background process via SSH
                  Start-Process -FilePath $exePath -WorkingDirectory $deployPath
                  Write-Host "‚úÖ Application start command issued."
                  Start-Sleep -Seconds 5 # Give it a moment to start
                  $newProcess = Get-Process -Name $appProcessName -ErrorAction SilentlyContinue
                  if ($newProcess) {
                    Write-Host "üü¢ Application is running with PID: $($newProcess.Id)"
                  } else {
                    Write-Host "üü† WARNING: Could not confirm if application started successfully."
                  }
                End-Group

                Write-Host ""
                Write-Host "=================================================="
                Write-Host "‚úÖ DEPLOYMENT SUCCEEDED"
                Write-Host "==================================================" -ForegroundColor Green

              } catch {
                Write-Host "=================================================="
                Write-Host "‚ùå DEPLOYMENT FAILED!"
                Write-Host "Error in step: $($_.InvocationInfo.ScriptLineNumber)"
                Write-Host "Message: $($_.Exception.Message)"
                Write-Host "==================================================" -ForegroundColor Red
                exit 1
              } finally {
                Start-Group "STEP 7: Cleanup"
                  if (Test-Path $zipFile) {
                    Write-Host "Cleaning up temporary file: $zipFile"
                    Remove-Item -Path $zipFile -Force
                    Write-Host "‚úÖ Cleanup complete."
                  }
                End-Group
              }
            `;
            const encodedScript = Buffer.from(script, 'utf16le').toString('base64');
            core.setOutput('encoded_script', encodedScript);
          result-encoding: string
          
      - name: '‚ñ∂Ô∏è Execute Remote Deployment Script'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            powershell -EncodedCommand ${{ steps.ps_script.outputs.encoded_script }}