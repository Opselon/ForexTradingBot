# ====================================================================================
# FINAL, SIMPLIFIED, AND GUARANTEED WORKFLOW
# This version removes all external script dependencies and uses a single-line,
# robust execution command to avoid all shell and character interpretation issues.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'

jobs:
  # ====================================================================
  # JOB 1: Build & Package
  # ====================================================================
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish Self-Contained App for Windows'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 1

  # ====================================================================
  # JOB 2: Deploy to Server
  # ====================================================================
  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üì§ Upload Release ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          # THE ULTIMATE SOLUTION: A single-line PowerShell command.
          # All logic is contained within this single command to prevent any misinterpretation.
          script: |
            powershell -NoProfile -ExecutionPolicy Bypass -Command "try { $ErrorActionPreference = 'Stop'; Write-Host '--- [1/7] Stopping Service ---'; $process = Get-Process -Name 'WebAPI' -ErrorAction SilentlyContinue; if ($process) { Stop-Process -Name 'WebAPI' -Force; Write-Host 'Service stopped.' } else { Write-Host 'Service not running.' }; Start-Sleep -s 3; Write-Host '--- [2/7] Cleaning Directory ---'; if (-not (Test-Path '${{ env.REMOTE_DEPLOY_PATH }}')) { New-Item -ItemType Directory -Path '${{ env.REMOTE_DEPLOY_PATH }}' -Force }; Get-ChildItem -Path '${{ env.REMOTE_DEPLOY_PATH }}' -Exclude 'Session' | Remove-Item -Recurse -Force; Write-Host '--- [3/7] Unpacking Archive ---'; Expand-Archive -Path '${{ env.REMOTE_TEMP_PATH }}\relpowershell -NoProfile -ExecutionPolicy Bypass -Command "try { $ErrorActionPreference = 'Stop'; Write-Host '--- [1/7] Stopping Service ---'; $process = Get-Process -Name 'WebAPI' -ErrorAction SilentlyContinue; if ($process) { Stop-Process -Name 'WebAPI' -Force; Write-Host 'Service stopped.' } else { Write-Host 'Service not running.' }; Start-Sleep -s 3; Write-Host '--- [2/7] Cleaning Directory ---'; if (-not (Test-Path '${{ env.REMOTE_DEPLOY_PATH }}')) { New-Item -ItemType Directory -Path '${{ env.REMOTE_DEPLOY_PATH }}' -Force }; Get-ChildItem -Path '${{ env.REMOTE_DEPLOY_PATH }}' -Exclude 'Session' | Remove-Item -Recurse -Force; Write-Host '--- [3/7] Unpacking Archive ---'; Expand-Archive -Path '${{ env.REMOTE_TEMP_PATH }}\release.zip' -DestinationPath '${{ env.REMOTE_DEPLOY_PATH }}' -Force; Write-Host '--- [4/7] Verifying Files ---'; if (-not (Test-Path '${{ env.REMOTE_DEPLOY_PATH }}\WebAPI.exe')) { throw 'FATAL: WebAPI.exe not found after unpack!' }; Write-Host 'WebAPI.exe found.'; Write-Host '--- [5/7] Injecting Secrets ---'; $appSettingsPath = '${{ env.REMOTE_DEPLOY_PATH }}\appsettings.Production.json'; (Get-Content $appSettingsPath -Raw) -replace '#{ConnectionString}#', '${{ secrets.PROD_CONNECTION_STRING }}' -replace '#{TelegramBotToken}#', '${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}' -replace '#{TelegramApiId}#', '${{ secrets.TELEGRAM_API_ID }}' -replace '#{TelegramApiHash}#', '${{ secrets.TELEGRAM_API_HASH }}' -replace '#{TelegramPhoneNumber}#', '${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}' -replace '#{CryptoPayApiToken}#', '${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}' | Set-Content -Path $appSettingsPath; Write-Host 'Secrets injected.'; Write-Host '--- [6/7] Starting Service with Production Environment ---'; $env:ASPNETCORE_ENVIRONMENT='Production'; Start-Process -FilePath '${{ env.REMOTE_DEPLOY_PATH }}\WebAPI.exe' -WorkingDirectory '${{ env.REMOTE_DEPLOY_PATH }}'; Write-Host 'Service started.'; Write-Host '--- [7/7] Final Cleanup ---'; Remove-Item -Path '${{ env.REMOTE_TEMP_PATH }}\release.zip' -Force; Write-Host '--- ‚úÖ DEPLOYMENT SUCCESSFUL ---' -ForegroundColor Green; } catch { Write-Host '--- ‚ùå DEPLOYMENT FAILED! ---' -ForegroundColor Red; Write-Host `"$($_.Exception.ToString())`" -ForegroundColor Red; exit 1; }"