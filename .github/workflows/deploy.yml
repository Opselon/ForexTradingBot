# ====================================================================================
# FINAL BULLETPROOF v3: Environment Variable Injection
# This method bypasses all appsettings.json issues by injecting secrets directly
# as environment variables, which have the highest priority.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'

jobs:
  # ... (Job 'build' remains the same) ...
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish Self-Contained App'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 1

  # ====================================================================
  # JOB 2: Deploy to Server
  # ====================================================================
  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üì§ Upload Release ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          script: |
            # This script now injects secrets as environment variables before starting the process.
            # This is the most reliable method.
            powershell -NoProfile -ExecutionPolicy Bypass -Command "
            try {
                $ErrorActionPreference = 'Stop'
                
                # --- Step 1: Stop Service ---
                Write-Host '--- [1/5] Stopping Service ---'
                $process = Get-Process -Name 'WebAPI' -ErrorAction SilentlyContinue
                if ($process) { Stop-Process -Name 'WebAPI' -Force; Write-Host 'Service stopped.' } else { Write-Host 'Service not running.' }
                
                # --- Step 2: Clean Directory ---
                Write-Host '--- [2/5] Cleaning Directory ---'
                Get-ChildItem -Path '${{ env.REMOTE_DEPLOY_PATH }}' -Exclude 'Session' | Remove-Item -Recurse -Force
                
                # --- Step 3: Unpack Archive ---
                Write-Host '--- [3/5] Unpacking Archive ---'
                Expand-Archive -Path '${{ env.REMOTE_TEMP_PATH }}\release.zip' -DestinationPath '${{ env.REMOTE_DEPLOY_PATH }}' -Force
                
                # --- Step 4: Set Environment Variables & Start Service ---
                Write-Host '--- [4/5] Setting Environment Variables and Starting Service ---'
                
                # Set all required configuration values as environment variables.
                # The format for nested JSON is 'Section__Key'.
                $env:ASPNETCORE_ENVIRONMENT = 'Production'
                $env:ConnectionStrings__DefaultConnection = '${{ secrets.PROD_CONNECTION_STRING }}'
                $env:DatabaseSettings__DatabaseProvider = 'SqlServer'
                $env:TelegramPanel__BotToken = '${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}'
                $env:TelegramUserApi__ApiId = '${{ secrets.TELEGRAM_API_ID }}'
                $env:TelegramUserApi__ApiHash = '${{ secrets.TELEGRAM_API_HASH }}'
                $env:TelegramUserApi__PhoneNumber = '${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}'
                $env:CryptoPay__ApiToken = '${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}'
                
                # Start the process. It will inherit all environment variables we just set.
                Start-Process -FilePath '${{ env.REMOTE_DEPLOY_PATH }}\WebAPI.exe' -WorkingDirectory '${{ env.REMOTE_DEPLOY_PATH }}'
                Write-Host 'Service start command issued.'

                # --- Step 5: Final Cleanup ---
                Write-Host '--- [5/5] Final Cleanup ---'
                Remove-Item -Path '${{ env.REMOTE_TEMP_PATH }}\release.zip' -Force
                
                Write-Host '--- ‚úÖ DEPLOYMENT SUCCESSFUL ---' -ForegroundColor Green
            } catch {
                Write-Host '--- ‚ùå DEPLOYMENT FAILED! ---' -ForegroundColor Red
                Write-Host `"$($_.Exception.ToString())`" -ForegroundColor Red
                exit 1
            }"