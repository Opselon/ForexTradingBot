# ====================================================================================
# [PROD] Workflow: Build, Package, and Deploy .NET WebAPI to Windows Server
# ====================================================================================
# FINAL, MOST ROBUST VERSION (Compatible with ssh-action's shell behavior)
#
# Key Features:
#   - üõ°Ô∏è Correct Base64 Encoding: The deployment script is prepared locally
#     on the runner and encoded to Base64 to be safely passed as a single
#     argument to powershell.exe, avoiding all shell interpretation issues.
#   - üëë Professional UI with collapsible log groups.
#   - üí• Fail-Fast Logic & Comprehensive Verification.
# ====================================================================================

name: 'üöÄ [PROD] Build & Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'

jobs:
  # ====================================================================
  # JOB 1: Build & Package
  # ====================================================================
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          dotnet-quality: 'preview'
      - name: 'üì¶ Publish Self-Contained App for Windows'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 7

  # ====================================================================
  # JOB 2: Deploy to Server
  # ====================================================================
  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üì§ Upload Release ZIP to Server'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: 'üìù Prepare PowerShell Deployment Script'
        id: prepare_script
        shell: pwsh
        run: |
          $script = @"
          # This script runs entirely on the remote Windows server
          `$ErrorActionPreference = 'Stop'

          # Define variables
          `$deployPath     = "${{ env.REMOTE_DEPLOY_PATH }}"
          `$tempPath       = "${{ env.REMOTE_TEMP_PATH }}"
          `$zipFile        = Join-Path `$tempPath "release.zip"
          `$appName        = "WebAPI.exe"
          `$appProcessName = "WebAPI"
          
          function Start-Group { param([string]`$title) Write-Host "::group::`$title" }
          function End-Group { Write-Host "::endgroup::" }

          try {
              Write-Host "=================================================="
              Write-Host "üöÄ STARTING DEPLOYMENT"
              Write-Host "   Commit: ${{ github.sha }}"
              Write-Host "=================================================="

              Start-Group "STEP 1: Stop Running Application"
                  Write-Host "Attempting to stop process: `$appProcessName"
                  `$process = Get-Process -Name `$appProcessName -ErrorAction SilentlyContinue
                  if (`$process) { Stop-Process -Name `$appProcessName -Force; Write-Host "‚úÖ Process stopped." }
                  else { Write-Host "üü° Process not found." }
              End-Group

              Start-Group "STEP 2: Clean Deployment Directory"
                  if (-not (Test-Path `$deployPath)) { New-Item -ItemType Directory -Path `$deployPath -Force | Out-Null }
                  Get-ChildItem -Path `$deployPath -Exclude 'Session' | Remove-Item -Recurse -Force
                  Write-Host "‚úÖ Directory cleaned."
              End-Group

              Start-Group "STEP 3: Unpack New Version"
                  Expand-Archive -Path `$zipFile -DestinationPath `$deployPath -Force
                  Write-Host "‚úÖ Archive unpacked."
              End-Group
            
              Start-Group "STEP 4: Verify Unpacked Files"
                  `$exePath = Join-Path `$deployPath `$appName
                  if (-not (Test-Path `$exePath)) { throw "FATAL: `$appName not found after unpacking." }
                  Write-Host "‚úÖ Verification successful. `$appName is present."
              End-Group

              Start-Group "STEP 5: Inject Production Secrets"
                  `$scriptPath = Join-Path `$deployPath "deployment_scripts\Inject-Secrets.ps1"
                  & `$scriptPath -DeployPath `$deployPath -ConnectionString "${{ secrets.PROD_CONNECTION_STRING }}" -TelegramBotToken "${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}" -TelegramApiId "${{ secrets.TELEGRAM_API_ID }}" -TelegramApiHash "${{ secrets.TELEGRAM_API_HASH }}" -TelegramPhoneNumber "${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}" -CryptoPayApiToken "${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}"
                  Write-Host "‚úÖ Secrets injected."
              End-Group
            
              Start-Group "STEP 6: Start New Application"
                  `$exePath = Join-Path `$deployPath `$appName
                  Start-Process -FilePath `$exePath -WorkingDirectory `$deployPath
                  Write-Host "‚úÖ Application start command issued."
                  Start-Sleep -Seconds 5
                  `$newProcess = Get-Process -Name `$appProcessName -ErrorAction SilentlyContinue
                  if (`$newProcess) { Write-Host "üü¢ Application is running with PID: `$(`$newProcess.Id)" }
                  else { Write-Host "üü† WARNING: Could not confirm if application started successfully." }
              End-Group

              Write-Host "=================================================="
              Write-Host "‚úÖ DEPLOYMENT SUCCEEDED" -ForegroundColor Green
              Write-Host "=================================================="

          } catch {
              Write-Host "==================================================" -ForegroundColor Red
              Write-Host "‚ùå DEPLOYMENT FAILED!" -ForegroundColor Red
              Write-Host "Error details: `$(`$_.Exception.ToString())" -ForegroundColor Red
              Write-Host "At line: `$(`$_.InvocationInfo.ScriptLineNumber)" -ForegroundColor Red
              Write-Host "==================================================" -ForegroundColor Red
              exit 1
          } finally {
              Start-Group "STEP 7: Cleanup"
                  if (Test-Path `$zipFile) { Remove-Item -Path `$zipFile -Force -ErrorAction SilentlyContinue; Write-Host "‚úÖ Archive cleaned up." }
              End-Group
          }
          "@
          
          $bytes = [System.Text.Encoding]::Unicode.GetBytes($script)
          $encodedScript = [Convert]::ToBase64String($bytes)
          
          echo "::set-output name=encoded_script::$encodedScript"
      
      - name: '‚ñ∂Ô∏è Execute Remote Deployment'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          # This is the correct, robust way to execute a complex script
          script: powershell.exe -EncodedCommand ${{ steps.prepare_script.outputs.encoded_script }}