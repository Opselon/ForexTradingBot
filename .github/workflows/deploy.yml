# ====================================================================================
# FINAL GUARANTEED VERSION: Return to Script Upload Method
# This method is the only reliable way to bypass all the ssh-action's
# shell interpretation bugs on Windows.
# ====================================================================================

name: 'üöÄ [PROD] Deploy ForexTradingBot'

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: production-deploy
  cancel-in-progress: true

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: './WebAPI/WebAPI.csproj'
  REMOTE_DEPLOY_PATH: 'C:\Apps\ForexTradingBot'
  REMOTE_TEMP_PATH: 'C:\Apps\Temp'
  SCRIPT_FILE_NAME: 'FinalDeploy.ps1' # New name to avoid any caching

jobs:
  build:
    name: '‚úÖ 1. Build & Package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: '‚öôÔ∏è Setup .NET SDK'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 'üì¶ Publish Self-Contained App'
        run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 -o ./publish --self-contained true
      - name: 'üóúÔ∏è Create ZIP Archive'
        run: cd ./publish && zip -r ../release.zip .
      - name: 'üì§ Upload Release Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: forex-bot-release-package
          path: release.zip
          retention-days: 1

  deploy:
    name: 'üö¢ 2. Deploy to Production VPS'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 'üì• Download Release Artifact'
        uses: actions/download-artifact@v4
        with:
          name: forex-bot-release-package

      - name: 'üìù Create Local PowerShell Deployment Script'
        shell: bash
        run: |
          cat << 'EOF' > ${{ env.SCRIPT_FILE_NAME }}
          # This script will be uploaded to and executed on the remote Windows server.
          # It has no parameters and defines everything internally for robustness.

          # --- DEFINE ALL VARIABLES INTERNALLY ---
          $DeployPath     = "${{ env.REMOTE_DEPLOY_PATH }}"
          $TempPath       = "${{ env.REMOTE_TEMP_PATH }}"
          
          $ErrorActionPreference = 'Stop'
          $appName = "WebAPI"
          $exeName = "WebAPI.exe"
          $zipFile = Join-Path $TempPath "release.zip"

          try {
              Write-Host "--- [1/5] Stopping Service ($appName) ---"
              $process = Get-Process -Name $appName -ErrorAction SilentlyContinue
              if ($process) { Stop-Process -Name $appName -Force; Write-Host '‚úÖ Service stopped.' } else { Write-Host 'üü° Service not running.' }

              Write-Host "--- [2/5] Cleaning Directory ($DeployPath) ---"
              if (-not (Test-Path $DeployPath)) { New-Item -ItemType Directory -Path $DeployPath -Force | Out-Null }
              Get-ChildItem -Path $DeployPath -Exclude 'Session' | Remove-Item -Recurse -Force
              Write-Host "‚úÖ Directory cleaned."

              Write-Host "--- [3/5] Unpacking Archive ($zipFile) ---"
              Expand-Archive -Path $zipFile -DestinationPath $DeployPath -Force
              Write-Host "‚úÖ Archive unpacked."
              
              Write-Host "--- [4/5] Starting Service with Production Environment ---"
              # Set environment variables for the process to be started.
              # THIS IS THE MOST RELIABLE WAY.
              $ProcessInfo = New-Object System.Diagnostics.ProcessStartInfo
              $ProcessInfo.FileName = Join-Path $DeployPath $exeName
              $ProcessInfo.WorkingDirectory = $DeployPath
              $ProcessInfo.EnvironmentVariables['ASPNETCORE_ENVIRONMENT'] = 'Production'
              $ProcessInfo.EnvironmentVariables['ConnectionStrings__DefaultConnection'] = '${{ secrets.PROD_CONNECTION_STRING }}'
              $ProcessInfo.EnvironmentVariables['DatabaseSettings__DatabaseProvider'] = 'SqlServer'
              $ProcessInfo.EnvironmentVariables['TelegramPanel__BotToken'] = '${{ secrets.PROD_TELEGRAM_BOT_TOKEN }}'
              $ProcessInfo.EnvironmentVariables['TelegramUserApi__ApiId'] = '${{ secrets.TELEGRAM_API_ID }}'
              $ProcessInfo.EnvironmentVariables['TelegramUserApi__ApiHash'] = '${{ secrets.TELEGRAM_API_HASH }}'
              $ProcessInfo.EnvironmentVariables['TelegramUserApi__PhoneNumber'] = '${{ secrets.PROD_TELEGRAM_PHONE_NUMBER }}'
              $ProcessInfo.EnvironmentVariables['CryptoPay__ApiToken'] = '${{ secrets.PROD_CRYPTOPAY_API_TOKEN }}'
              
              [System.Diagnostics.Process]::Start($ProcessInfo)
              Write-Host "‚úÖ Service start command issued."
              
              Write-Host "--- ‚úÖ DEPLOYMENT SUCCESSFUL ---" -ForegroundColor Green

          } catch {
              Write-Host "--- ‚ùå DEPLOYMENT FAILED! ---" -ForegroundColor Red
              Write-Host "Error: $($_.Exception.ToString())" -ForegroundColor Red
              exit 1
          } finally {
              Write-Host "--- [FINAL CLEANUP] ---"
              if (Test-Path $zipFile) { Remove-Item -Path $zipFile -Force -ErrorAction SilentlyContinue; Write-Host "‚úÖ Temp archive deleted." }
          }
          EOF
          
      - name: 'üì§ Upload Release ZIP and Script File'
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          source: "${{ env.SCRIPT_FILE_NAME }},release.zip"
          target: "${{ env.REMOTE_TEMP_PATH }}"
      
      - name: '‚ñ∂Ô∏è Execute and Cleanup'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_IP }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          password: ${{ secrets.PROD_SERVER_PASSWORD }}
          # A single, clean command to execute the script, then a second to clean up.
          script: |
            powershell.exe -NoProfile -ExecutionPolicy Bypass -File "${{ env.REMOTE_TEMP_PATH }}\${{ env.SCRIPT_FILE_NAME }}"
            del "${{ env.REMOTE_TEMP_PATH }}\${{ env.SCRIPT_FILE_NAME }}"