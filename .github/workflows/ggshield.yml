name: 🛡️ GGShield Scan on Push

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request: # اسکن روی Pull Request ها برای شناسایی زودهنگام رازها
    branches:
      - main
      - master
      - develop

jobs:
  ggshield-secret-scan:
    name: 🕵️ Run GGShield Secret Scan
    runs-on: ubuntu-latest

    # کلید API گیت‌گاردین را به عنوان یک متغیر محیطی برای کل Job تنظیم می‌کند.
    # ggshield به صورت خودکار این متغیر محیطی را شناسایی و استفاده خواهد کرد.
    env:
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4 # استفاده از v4 برای آخرین ویژگی‌ها و امنیت

      - name: 🐍 Set up Python Environment
        uses: actions/setup-python@v5 # استفاده از v5 برای آخرین ویژگی‌ها و امنیت
        with:
          python-version: '3.x' # استفاده از آخرین نسخه پایدار 3.x
          # 'cache: pip' حذف شد زیرا مخزن شما احتمالا فایل requirements.txt یا pyproject.toml در ریشه ندارد
          # که باعث خطای قبلی می‌شد. برای نصب فقط ggshield، کش‌کردن حیاتی نیست.

      - name: 📦 Install ggshield
        run: |
          echo "Installing ggshield..."
          pip install ggshield
          echo "ggshield installed successfully."
          echo "ggshield version: $(ggshield --version)" # نمایش نسخه ggshield

      - name: 🔎 Run ggshield Secret Scan on Repository (Show All Secrets)
        run: |
          echo "Starting ggshield secret scan..."
          # استفاده از --all-secrets برای نمایش تمام رازهای شناسایی شده، حتی آن‌هایی که معمولاً نادیده گرفته می‌شوند.
          # این باعث می‌شود ggshield خطای واضح‌تری دهد و پایپ‌لاین را با شکست مواجه کند.
          ggshield secret scan repo . --all-secrets
          echo "ggshield secret scan completed without immediate failure check."
        # اگر ggshield رازهایی پیدا کند، با یک کد خروج غیرصفر (معمولاً 1) از برنامه خارج می‌شود،
        # که باعث شکست این مرحله (و در نتیجه کل Job) خواهد شد.
        # این رفتار مطلوب برای نشان دادن نشت راز است.
        # هیچ "خودکار-رفع" در این مرحله انجام نمی‌شود؛ فقط شناسایی و هشدار.

      # این مرحله برای اطلاع‌رسانی در مورد وضعیت اسکن است، چه موفق باشد چه ناموفق
      - name: 🔔 Scan Status Notification & Remediation Guidance
        if: always() # این مرحله همیشه اجرا می‌شود، حتی اگر اسکن ناموفق باشد
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ GGShield scan completed successfully. No new secrets detected in this push/PR."
            echo "Your code is clean for secrets."
          else
            echo "❌ GGShield scan FAILED: Secrets were detected in your repository!"
            echo "--------------------------------------------------------"
            echo "IMMEDIATE ACTION REQUIRED: Sensitive secrets were found in your code or Git history."
            echo "Please review the detailed logs above for specifics (look for 'Secret detected' messages)."
            echo "Even 'Ignored' secrets are a security risk if they are in your repository history."
            echo ""
            echo "To resolve this critical issue, you MUST take the following manual steps:"
            echo "1. Rotate the compromised secrets: Immediately change/invalidate the detected tokens (e.g., get new Telegram Bot Tokens, update passwords)."
            echo "2. Clean your Git history: Permanently remove the secrets from ALL past commits where they appear."
            echo "   - This is an advanced Git operation. Search for 'GitGuardian secret remediation' or 'git filter-repo' for detailed, safe instructions."
            echo "   - Example: git filter-repo --path .env --force (this will remove .env from all history)"
            echo "   - After cleaning history, you will need to 'git push --force' (use with extreme caution in shared repos)."
            echo "3. Update your local code: Remove hardcoded secrets from files like .env and appsettings.json."
            echo "   - For .env files: Add '.env' to your .gitignore immediately: 'echo .env >> .gitignore'."
            echo "4. Store secrets securely: Use GitHub Repository Secrets (Settings -> Secrets and variables -> Actions) to store your new tokens/passwords."
            echo "5. Update your application: Modify your application's code to read these secrets from environment variables (e.g., os.environ in Python, or configuration providers in .NET) instead of directly from files."
            echo "6. Implement pre-commit hooks: For future prevention, consider installing 'ggshield' as a pre-commit hook locally."
            echo "   - This will scan your code *before* you commit, preventing secrets from entering your Git history in the first place."
            echo "--------------------------------------------------------"
            echo "This workflow will continue to fail until ALL secrets are removed from your repository's history."
          fi