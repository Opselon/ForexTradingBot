name: 🛡️ GGShield Scan on Push

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request: # اسکن روی Pull Request ها برای شناسایی زودهنگام رازها
    branches:
      - main
      - master
      - develop

jobs:
  ggshield-secret-scan:
    name: 🕵️ Run GGShield Secret Scan
    runs-on: ubuntu-latest

    # کلید API گیت‌گاردین را به عنوان یک متغیر محیطی برای کل Job تنظیم می‌کند.
    # ggshield به صورت خودکار این متغیر محیطی را شناسایی و استفاده خواهد کرد.
    env:
      GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4 # استفاده از v4 برای آخرین ویژگی‌ها و امنیت

      - name: 🐍 Set up Python Environment
        uses: actions/setup-python@v5 # استفاده از v5 برای آخرین ویژگی‌ها و امنیت
        with:
          python-version: '3.x' # استفاده از آخرین نسخه پایدار 3.x
          # 'cache: pip' حذف شد زیرا مخزن شما احتمالا فایل requirements.txt یا pyproject.toml در ریشه ندارد
          # که باعث خطای قبلی می‌شد. برای نصب فقط ggshield، کش‌کردن حیاتی نیست.

      - name: 📦 Install pre-commit and ggshield
        run: |
          echo "Installing pre-commit..."
          pip install pre-commit
          echo "pre-commit installed successfully."
          echo "Running pre-commit install to set up hooks for CI environment..."
          pre-commit install-hooks # این دستور هوک‌ها را برای محیط CI تنظیم می‌کند
          echo "pre-commit hooks installed for CI."
          echo "ggshield version: $(ggshield --version)" # نمایش نسخه ggshield

      - name: 🔎 Run ggshield Secret Scan via pre-commit (Show All Secrets)
        # این مرحله ggshield را از طریق pre-commit اجرا می‌کند.
        # این همان هوکی است که توسعه‌دهندگان باید به صورت محلی نصب کنند.
        run: |
          echo "Starting ggshield secret scan via pre-commit..."
          # 'pre-commit run --all-files' تمام هوک‌ها را روی تمام فایل‌ها اجرا می‌کند.
          # آرگومان ها را می توانید در .pre-commit-config.yaml یا اینجا اضافه کنید.
          # برای اینکه ggshield همه رازها را نشان دهد، از --hook-arg --all-secrets استفاده می کنیم.
          pre-commit run ggshield --all-files --hook-arg --all-secrets
          echo "ggshield secret scan completed without immediate failure check."
        # اگر ggshield رازهایی پیدا کند، pre-commit با کد خروج غیرصفر خارج می‌شود،
        # که باعث شکست این مرحله (و در نتیجه کل Job) خواهد شد.

      # این مرحله برای اطلاع‌رسانی در مورد وضعیت اسکن است، چه موفق باشد چه ناموفق
      - name: 🔔 Scan Status Notification & Remediation Guidance
        if: always() # این مرحله همیشه اجرا می‌شود، حتی اگر اسکن ناموفق باشد
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ GGShield scan completed successfully. No new secrets detected in this push/PR."
            echo "Your code is clean for secrets."
          else
            echo "❌ GGShield scan FAILED: Secrets were detected in your repository!"
            echo "--------------------------------------------------------"
            echo "IMMEDIATE ACTION REQUIRED: Sensitive secrets were found in your code or Git history."
            echo "Please review the detailed logs above for specifics (look for 'Secret detected' messages)."
            echo "Even 'Ignored' secrets are a security risk if they are in your repository history."
            echo ""
            echo "To resolve this critical issue, you MUST take the following manual steps:"
            echo "1. Rotate the compromised secrets: Immediately change/invalidate the detected tokens (e.g., get new Telegram Bot Tokens, update passwords)."
            echo "2. Clean your Git history: Permanently remove the secrets from ALL past commits where they appear."
            echo "   - This is an advanced Git operation. Search for 'GitGuardian secret remediation' or 'git filter-repo' for detailed, safe instructions."
            echo "   - Example: git filter-repo --path .env --force (this will remove .env from all history)"
            echo "   - After cleaning history, you will need to 'git push --force' (use with extreme caution in shared repos)."
            echo "3. Update your local code: Remove hardcoded secrets from files like .env and appsettings.json."
            echo "   - For .env files: Add '.env' to your .gitignore immediately: 'echo .env >> .gitignore'."
            echo "4. Store secrets securely: Use GitHub Repository Secrets (Settings -> Secrets and variables -> Actions) to store your new tokens/passwords."
            echo "5. Update your application: Modify your application's code to read these secrets from environment variables (e.g., os.environ in Python, or configuration providers in .NET) instead of directly from files."
            echo "6. IMPORTANT FOR LOCAL DEVELOPMENT: Install pre-commit hooks locally to prevent future leaks!"
            echo "   - On your local machine, navigate to your repository root and run:"
            echo "     pip install pre-commit"
            echo "     pre-commit install"
            echo "   - This will scan your code *before* you commit, preventing secrets from entering your Git history."
            echo "--------------------------------------------------------"
            echo "This workflow will continue to fail until ALL secrets are removed from your repository's history."
          fi