// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250522102509_AddForwardingRulesTable")]
    partial class AddForwardingRulesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.NewsItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedAssets")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("AssociatedSignalCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetectedLanguage")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FullContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<bool>("IsVipOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RssSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SentimentLabel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("SentimentScore")
                        .HasColumnType("float");

                    b.Property<string>("SourceItemId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SourceName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedSignalCategoryId");

                    b.HasIndex("Link");

                    b.HasIndex("RssSourceId", "SourceItemId")
                        .IsUnique()
                        .HasFilter("[SourceItemId] IS NOT NULL");

                    b.ToTable("NewsItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RssSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("DefaultSignalCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ETag")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("FetchErrorCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("FetchIntervalMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastFetchAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedHeader")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastSuccessfulFetchAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSignalCategoryId");

                    b.HasIndex("SourceName");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("RssSources", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Signal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EntryPrice")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<bool>("IsVipOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal>("StopLoss")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TakeProfit")
                        .HasColumnType("decimal(18, 8)");

                    b.Property<string>("Timeframe")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Symbol");

                    b.ToTable("Signals", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SignalAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnalysisText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnalystName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("SentimentScore")
                        .HasColumnType("float");

                    b.Property<Guid>("SignalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignalId");

                    b.ToTable("SignalAnalyses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SignalCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SignalCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivatingTransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EndDate");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TokenWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 8)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TokenWallets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentGatewayInvoiceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentGatewayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentGatewayPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentGatewayResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentGatewayInvoiceId");

                    b.HasIndex("Status");

                    b.HasIndex("Timestamp");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EnableGeneralNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableRssNewsNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("EnableVipSignalNotifications")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en");

                    b.Property<string>("TelegramId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserSignalPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("UserSignalPreferences", (string)null);
                });

            modelBuilder.Entity("Domain.Features.Forwarding.Entities.ForwardingRule", b =>
                {
                    b.Property<string>("RuleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<long>("SourceChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetChannelIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RuleName");

                    b.ToTable("ForwardingRules", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.NewsItem", b =>
                {
                    b.HasOne("Domain.Entities.SignalCategory", "AssociatedSignalCategory")
                        .WithMany()
                        .HasForeignKey("AssociatedSignalCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.RssSource", "RssSource")
                        .WithMany("NewsItems")
                        .HasForeignKey("RssSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssociatedSignalCategory");

                    b.Navigation("RssSource");
                });

            modelBuilder.Entity("Domain.Entities.RssSource", b =>
                {
                    b.HasOne("Domain.Entities.SignalCategory", "DefaultSignalCategory")
                        .WithMany()
                        .HasForeignKey("DefaultSignalCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DefaultSignalCategory");
                });

            modelBuilder.Entity("Domain.Entities.Signal", b =>
                {
                    b.HasOne("Domain.Entities.SignalCategory", "Category")
                        .WithMany("Signals")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.SignalAnalysis", b =>
                {
                    b.HasOne("Domain.Entities.Signal", "Signal")
                        .WithMany("Analyses")
                        .HasForeignKey("SignalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Signal");
                });

            modelBuilder.Entity("Domain.Entities.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TokenWallet", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("TokenWallet")
                        .HasForeignKey("Domain.Entities.TokenWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserSignalPreference", b =>
                {
                    b.HasOne("Domain.Entities.SignalCategory", "Category")
                        .WithMany("UserPreferences")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Features.Forwarding.Entities.ForwardingRule", b =>
                {
                    b.OwnsOne("Domain.Features.Forwarding.ValueObjects.MessageEditOptions", "EditOptions", b1 =>
                        {
                            b1.Property<string>("ForwardingRuleRuleName")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("AppendText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("CustomFooter")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("DropAuthor")
                                .HasColumnType("bit");

                            b1.Property<bool>("DropMediaCaptions")
                                .HasColumnType("bit");

                            b1.Property<bool>("NoForwards")
                                .HasColumnType("bit");

                            b1.Property<string>("PrependText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("RemoveLinks")
                                .HasColumnType("bit");

                            b1.Property<bool>("RemoveSourceForwardHeader")
                                .HasColumnType("bit");

                            b1.Property<bool>("StripFormatting")
                                .HasColumnType("bit");

                            b1.HasKey("ForwardingRuleRuleName");

                            b1.ToTable("ForwardingRules");

                            b1.WithOwner()
                                .HasForeignKey("ForwardingRuleRuleName");

                            b1.OwnsMany("Domain.Features.Forwarding.ValueObjects.TextReplacementRule", "TextReplacements", b2 =>
                                {
                                    b2.Property<string>("MessageEditOptionsForwardingRuleRuleName")
                                        .HasColumnType("nvarchar(100)");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("Find")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<bool>("IsRegex")
                                        .HasColumnType("bit");

                                    b2.Property<int>("RegexOptions")
                                        .HasColumnType("int");

                                    b2.Property<string>("ReplaceWith")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("MessageEditOptionsForwardingRuleRuleName", "Id");

                                    b2.ToTable("TextReplacementRule");

                                    b2.WithOwner()
                                        .HasForeignKey("MessageEditOptionsForwardingRuleRuleName");
                                });

                            b1.Navigation("TextReplacements");
                        });

                    b.OwnsOne("Domain.Features.Forwarding.ValueObjects.MessageFilterOptions", "FilterOptions", b1 =>
                        {
                            b1.Property<string>("ForwardingRuleRuleName")
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("AllowedMessageTypes")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AllowedMimeTypes")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AllowedSenderUserIds")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("BlockedSenderUserIds")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContainsText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("ContainsTextIsRegex")
                                .HasColumnType("bit");

                            b1.Property<int>("ContainsTextRegexOptions")
                                .HasColumnType("int");

                            b1.Property<bool>("IgnoreEditedMessages")
                                .HasColumnType("bit");

                            b1.Property<bool>("IgnoreServiceMessages")
                                .HasColumnType("bit");

                            b1.Property<int?>("MaxMessageLength")
                                .HasColumnType("int");

                            b1.Property<int?>("MinMessageLength")
                                .HasColumnType("int");

                            b1.HasKey("ForwardingRuleRuleName");

                            b1.ToTable("ForwardingRules");

                            b1.WithOwner()
                                .HasForeignKey("ForwardingRuleRuleName");
                        });

                    b.Navigation("EditOptions")
                        .IsRequired();

                    b.Navigation("FilterOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.RssSource", b =>
                {
                    b.Navigation("NewsItems");
                });

            modelBuilder.Entity("Domain.Entities.Signal", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("Domain.Entities.SignalCategory", b =>
                {
                    b.Navigation("Signals");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Preferences");

                    b.Navigation("Subscriptions");

                    b.Navigation("TokenWallet")
                        .IsRequired();

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
