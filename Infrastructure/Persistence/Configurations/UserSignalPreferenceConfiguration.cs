// File: Infrastructure/Persistence/Configurations/UserSignalPreferenceConfiguration.cs
using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Infrastructure.Persistence.Configurations
{
    public class UserSignalPreferenceConfiguration : IEntityTypeConfiguration<UserSignalPreference>
    {
        public void Configure(EntityTypeBuilder<UserSignalPreference> builder)
        {
            builder.ToTable("UserSignalPreferences");

            // Using a composite key for this join table is a common practice
            // to ensure a user can only have one preference entry per category.
            builder.HasKey(usp => new { usp.UserId, usp.CategoryId });

            // If you prefer a separate Guid Id as PK (as in your previous DbContext):
            // builder.HasKey(usp => usp.Id);
            // builder.Property(usp => usp.Id).ValueGeneratedOnAdd(); // If Guid is generated by DB
            // builder.HasIndex(usp => new { usp.UserId, usp.CategoryId }).IsUnique(); // Then add unique constraint

            builder.Property(usp => usp.CreatedAt).IsRequired();

            // Relationship with User (already configured in UserConfiguration via HasMany)
            // builder.HasOne(usp => usp.User)
            //        .WithMany(u => u.Preferences)
            //        .HasForeignKey(usp => usp.UserId)
            //        .OnDelete(DeleteBehavior.Cascade);

            // Relationship with SignalCategory
            builder.HasOne(usp => usp.Category)
                .WithMany(sc => sc.UserPreferences) // Assuming SignalCategory has ICollection<UserSignalPreference> UserPreferences
                .HasForeignKey(usp => usp.CategoryId)
                .OnDelete(DeleteBehavior.Cascade); // If a category is deleted, user preferences for it are also deleted
        }
    }
}