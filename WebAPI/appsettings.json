{
    // =================================================================================
    // Logging Configuration
    // Configures how and at what level logs are captured in the application.
    // =================================================================================
    "Logging": {
        "LogLevel": {
            // Default log level for all categories. Possible values: Trace, Debug, Information, Warning, Error, Critical, None.
            "Default": "Information", // Recommended for Production. Use "Debug" or "Trace" for Development.
            // Specific log level for categories starting with "Microsoft.AspNetCore" (e.g., ASP.NET Core logs).
            "Microsoft.AspNetCore": "Warning" // Reduce verbosity for production.
        }
    },

    // =================================================================================
    // Kestrel Server Configuration (ASP.NET Core specific)
    // Specifies the virtual hosts that the application responds to. "*" means all hosts.
    // For production, it's recommended to specify actual domain names or IPs.
    // =================================================================================
    "AllowedHosts": "*", // For development, "*" is fine. For production, specify actual hostnames (e.g., "yourdomain.com").

    // =================================================================================
    // Database Configuration
    // Settings for database connection.
    // =================================================================================
    "DatabaseProvider": "SqlServer", // Database provider type. Valid values: "SqlServer" or "Postgres" (or "PostgreSQL").
    // This value is used by the code to select the appropriate driver.

    "ConnectionStrings": {
        // Default database connection string.
        // IMPORTANT: Connection strings contain sensitive information (passwords).
        // DO NOT hardcode them directly in appsettings.json for production.
        // Use environment variables, Azure Key Vault, AWS Secrets Manager, or other secure configuration providers.
        //
        // Example for SQL Server (placeholder for production):
        // "DefaultConnection": "Server=tcp:yourserver.database.windows.net,1433;Initial Catalog=ForexBotDb;Persist Security Info=False;User ID=your_user;Password=your_password;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
        //
        // Example for PostgreSQL (placeholder for production):
        // "DefaultConnection": "Host=your_postgres_host;Port=5432;Database=ForexBotDb;Username=your_postgres_user;Password=your_postgres_password;"
        "DefaultConnection": "YOUR_DATABASE_CONNECTION_STRING_HERE"
    },

    // =================================================================================
    // Telegram Bot Panel Configuration
    // Specific settings for the Telegram bot/panel.
    // =================================================================================
    "TelegramPanel": {
        // Telegram Bot API Token. EXTREMELY SENSITIVE.
        // Always load from secure sources like environment variables or a secrets management service.
        "BotToken": "YOUR_TELEGRAM_BOT_TOKEN_HERE",
        // Use Webhook mode? true/false. Webhook is recommended for production.
        "UseWebhook": true,
        // The public URL where Telegram will send updates (must be HTTPS).
        // If running in Docker, this must be accessible from the internet (e.g., via Nginx proxy or cloud load balancer).
        "WebhookAddress": "YOUR_WEBHOOK_PUBLIC_URL_HERE",
        // A secret token set during webhook configuration for verifying Telegram requests. SENSITIVE.
        "WebhookSecretToken": "YOUR_TELEGRAM_WEBHOOK_SECRET_TOKEN_HERE",
        // Polling interval in milliseconds if UseWebhook is false. 0 means continuous polling (use with caution).
        // If using Webhook, this value is irrelevant.
        "PollingInterval": 0,
        // List of Telegram User IDs that have admin privileges. SENSITIVE (identifies admin users).
        // Load from secure configuration or manage through a separate admin panel.
        "AdminUserIds": [ 123456789, 987654321 ], // Example IDs, replace with actual admin IDs.
        // Enable debug logging for Telegram Panel. Should be 'false' in production.
        "EnableDebugMode": false
    },

    // =================================================================================
    // Telegram User API Configuration (for WTelegramClient if used)
    // Settings for interacting with Telegram as a user account (MTProto API). HIGHLY SENSITIVE.
    // Used for advanced features like joining private channels or reading specific messages.
    // =================================================================================
    "TelegramUserApi": {
        // API ID obtained from my.telegram.org. SENSITIVE.
        "ApiId": 0, // YOUR_TELEGRAM_API_ID_HERE
        // API Hash obtained from my.telegram.org. EXTREMELY SENSITIVE.
        "ApiHash": "YOUR_TELEGRAM_API_HASH_HERE",
        // Phone number of the Telegram user account. SENSITIVE.
        "PhoneNumber": "YOUR_TELEGRAM_PHONE_NUMBER_HERE",
        // Path to store the session file. The file itself contains sensitive authentication data.
        "SessionPath": "telegram_user.session", // Ensure this path is secure and not exposed.
        // Source for verification code (e.g., "Console", "EnvironmentVariable"). For production, "EnvironmentVariable" or "None" is recommended.
        "VerificationCodeSource": "EnvironmentVariable",
        // Source for 2FA password. For production, "EnvironmentVariable" or "None" is recommended.
        "TwoFactorPasswordSource": "EnvironmentVariable",
        // This token might be used if the user bot also acts as a regular bot.
        // If it's the same as the main bot token, consider just referencing the main bot token securely.
        "BotToken": "YOUR_MAIN_TELEGRAM_BOT_TOKEN_HERE_IF_APPLICABLE"
    },

    // =================================================================================
    // CryptoPay Configuration
    // Settings for Crypto Pay API integration.
    // =================================================================================
    "CryptoPay": {
        // Crypto Pay API Token. EXTREMELY SENSITIVE.
        "ApiToken": "YOUR_CRYPTOPAY_API_TOKEN_HERE",
        // Base URL for Crypto Pay API. Use Testnet for testing, Mainnet for production.
        "BaseUrl": "https://pay.crypt.bot/api/", // Change to "https://pay.crypt.bot/api/" for mainnet.
        "IsTestnet": true, // Set to 'false' for production.
        // A strong secret for Crypto Pay webhooks to verify incoming requests. SENSITIVE.
        "WebhookSecretForCryptoPay": "YOUR_CRYPTOPAY_WEBHOOK_SECRET_HERE"
    },

    // =================================================================================
    // Forwarding Rules Configuration
    // Rules for message forwarding between channels.
    // =================================================================================
    "ForwardingRules": [
        {
            // Bot token for this specific forwarding rule (if different from main bot). SENSITIVE.
            "BotToken": "BOT_TOKEN_FOR_FORWARDING_RULE_1",
            // Numeric ID of the source channel (-100... for channels).
            "SourceChannelId": -1000000000000, // Replace with actual ID
            // Numeric ID of the target channel.
            "TargetChannelId": -1000000000001, // Replace with actual ID
            "IsEnabled": true,
            "EditOptions": {
                "AppendText": "\n\nForwarded by MyBotReza",
                "ReplaceText": [
                    {
                        "Find": "OldText",
                        "ReplaceWith": "NewText"
                    }
                ],
                "RemoveLinks": false,
                "AllowedMessageTypes": [ "Text", "Photo", "Video" ]
            }
        }
        // ... other forwarding rules ...
    ],

    // =================================================================================
    // Hangfire Configuration
    // Settings for Hangfire background job processing.
    // =================================================================================
    "HangfireSettings": {
        // Storage type for Hangfire. "Memory" is for development/testing only (data is lost on restart).
        // For production, use "SqlServer" or "PostgreSql" for durability.
        "StorageType": "SqlServer",
        // Connection string for Hangfire storage (if SqlServer/PostgreSql).
        // IMPORTANT: Like DefaultConnection, this should be loaded securely for production.
        "ConnectionString": "YOUR_HANGFIRE_CONNECTION_STRING_HERE"
    }
}