version: '3.8'

services:
  ########################################
  # Your .NET Web API Application Service
  ########################################
  forex-trading-bot-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: forex-trading-bot-app
    ports:
      - "8080:80"
    environment:
      # --- Database Connection ---
      # The hostname 'db' matches the service name of the SQL Server container
      - ConnectionStrings__DefaultConnection=Server=db,1433;Database=${DB_DATABASE_NAME};User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=True
      - ConnectionStrings__PostgresConnection=Server=postgres-db;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__Redis=redis:6379,abortConnect=false

      # --- ✅✅ NEW: REDIS CONNECTION STRING ✅✅ ---
      # The hostname 'redis' matches the service name of the new Redis container
      - ConnectionStrings__Redis=redis:6379,abortConnect=false

      # --- Telegram Panel ---
      - TelegramPanel__BotToken=${TELEGRAM_BOT_TOKEN}
      - TelegramPanel__AdminUserIds=${TELEGRAM_ADMIN_IDS}

      # --- Telegram User API ---
      - TelegramUserApi__ApiId=${TELEGRAM_API_ID}
      - TelegramUserApi__ApiHash=${TELEGRAM_API_HASH}
      - TelegramUserApi__PhoneNumber=${TELEGRAM_PHONE_NUMBER}
      - TelegramUserApi__SessionPath=/app/sessions/telegram_user.session

      # --- CryptoPay ---
      - CryptoPay__ApiToken=${CRYPTO_PAY_API_TOKEN}

      # --- Other Settings ---
      - ASPNETCORE_ENVIRONMENT=Production

    volumes:
      - telegram_session_data:/app/sessions
      - log_data:/app/logs
    depends_on:
      - db
      - redis  # ✅ Your app now depends on Redis starting first
    restart: unless-stopped
    networks:
      - forex-bot-network

  ###################################
  # The SQL Server Database Service
  ###################################
  db:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    container_name: sql-server-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_SA_PASSWORD}
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - forex-bot-network

  ###################################
  # ✅✅ NEW: REDIS CACHE SERVICE ✅✅
  ###################################
  # ... other services ...
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - forex-bot-network
    # ✅✅ THIS IS THE FIX ✅✅
    # Map port 6379 on your Windows machine (the host) to port 6379 inside the container.
    ports:
      - "6379:6379"
  #######################################
  # ✅✅ NEW: PostgreSQL Database Service ✅✅
  #######################################
  postgres-db:
    image: postgres:15-alpine  # Use a specific, recent, and lightweight version
    container_name: postgres-db
    restart: always
    environment:
      # These variables are read from your .env file
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      # This persists the PostgreSQL data, so you don't lose it on restart
      - postgres_data:/var/lib/postgresql/data
    networks:
      - forex-bot-network
    ports:
      # Optional: Expose the port to your Windows machine for tools like DBeaver or pgAdmin
      - "5432:5432"
    healthcheck:
      # This command checks if the database is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

# --- Docker Network ---
networks:
  forex-bot-network:
    driver: bridge

# --- Docker Volumes ---
volumes:
  sqlserver_data:
  telegram_session_data:
  postgres_data: 
  log_data:
  redis_data: # ✅ Define the volume for Redis data persistence